#!/usr/bin/env python

# Alternative visualization of historical data (visual trace) generated by visual.cpp
import matplotlib
matplotlib.rcParams['pdf.fonttype'] = 42
matplotlib.rcParams['ps.fonttype'] = 42
matplotlib.rcParams['figure.figsize'] = 4, 3
import matplotlib.patches as mpatches
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import argparse
import seaborn as sns


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--csv", help="The csv to be plotted.", default="log/visual/trace.csv")
    args = parser.parse_args()

    sns.set_style("whitegrid")
    palette = sns.color_palette("deep")
    linestyles = ["solid", "dotted", "dashed", "dashdot"]

    df = pd.read_csv(args.csv, index_col="time")

    fig, ax = plt.subplots()
    events = df["event"][df["event"].notnull()]
    df.drop(columns="event", inplace=True)
    patches = []
    event_colors = dict()
    for i, value in enumerate(events.unique()):
        event_colors[value] = palette[i % len(palette)]
        patches.append(mpatches.Patch(color=event_colors[value], label=value, alpha=0.5))
    for (index, value) in events.items():
        ax.axvline(x=index, linestyle="solid", color=event_colors[value], alpha=0.5)
    event_legend = ax.legend(handles=patches, loc='upper right')

    lines = []
    for i in range(20):
        for j, c in enumerate(sorted(df.columns)):
            if c.endswith(f"-{i}"):
                line, = plt.plot(df.index, df[c], label=c, color=palette[i], linestyle=linestyles[j % len(linestyles)])
                lines.append(line)
    legend = ax.legend(fancybox=True, shadow=True, loc='upper left')
    plt.gca().add_artist(event_legend)

    # Enable picking
    legline_to_origline = dict()
    visible = dict()
    for legline, origline in zip(legend.get_lines(), lines):
        legline.set_picker(True)
        legline.set_pickradius(10)
        legline_to_origline[legline] = origline
        visible[legline] = True

    def on_pick(event):
        legline = event.artist
        if not legline in legline_to_origline:
            print(f"{legline} not found")
            return

        # if this is the only visible line
        # show all
        visible_lines = [l for l, v in visible.items() if v]
        if visible[legline] and len(visible_lines) == 1:
            for l in visible.keys():
                visible[l] = True

        # if all lines are visible
        # show only the picked one
        elif len(visible_lines) == len(lines):
            for l in visible.keys():
                if l != legline:
                    visible[l] = False

        # otherwise toggle
        else:
            visible[legline] = not visible[legline]

        # change the alpha on the line in the legend, so we can see what lines
        # have been toggled.
        for l, v in visible.items():
            legline_to_origline[l].set_visible(v)
            l.set_alpha(1.0 if v else 0.2)

        # redraw
        fig.canvas.draw()

    fig.canvas.mpl_connect('pick_event', on_pick)
    plt.show()